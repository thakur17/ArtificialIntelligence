import numpy as np

# Sigmoid activation function and its derivative
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.learning_rate = learning_rate

# Initialize weights and biases randomly
        self.weights_input_hidden = ([[0.1,0.8], [0.4, 0.6]])

        #np.random.uniform(size=(self.input_size, self.hidden_size))
        #self.bias_hidden = np.zeros((1, self.hidden_size))

        self.weights_hidden_output = ([[0.3], [0.9]])

        #self.bias_output = np.zeros((1, self.output_size))

                # Hidden layer calculation
        self.hidden_layer_input = np.dot(X, self.weights_input_hidden)


        #+ self.bias_hidden

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.1):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.learning_rate = learning_rate

        # Initialize weights with predefined values as NumPy arrays
        self.weights_input_hidden = np.array([[0.1, 0.8], [0.4, 0.6]])
        self.weights_hidden_output = np.array([[0.3], [0.9]])

    def forward(self, X):
        # Hidden layer calculation (no bias)
        self.hidden_layer_input = np.dot(X, self.weights_input_hidden)
        self.hidden_layer_output = sigmoid(self.hidden_layer_input)

        # Output layer calculation (no bias)
        self.output_layer_input = np.dot(self.hidden_layer_output, self.weights_hidden_output)
        self.predicted_output = sigmoid(self.output_layer_input)
        return self.predicted_output

    def backward(self, X, y, predicted_output):
        # Calculate output layer error and delta
        output_error = y - predicted_output
        output_delta = output_error * sigmoid_derivative(predicted_output)

        # Calculate hidden layer error and delta
        hidden_layer_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_layer_delta = hidden_layer_error * sigmoid_derivative(self.hidden_layer_output)

        # Update weights (no bias updates)
        self.weights_hidden_output += self.hidden_layer_output.T.dot(output_delta) * self.learning_rate
        self.weights_input_hidden += X.T.dot(hidden_layer_delta) * self.learning_rate

        print(f"inout to hidden weights : {self.weights_input_hidden}")
        print(f"hidden to output weights : {self.weights_hidden_output}")


    def train(self, X, y, epochs):
        for _ in range(epochs):
            predicted_output = self.forward(X)
            print(f"predicted output in epoch {_} = {predicted_output}")

            self.backward(X, y, predicted_output)

# Example usage with one sample and specified network structure
if __name__ == "__main__":
    # Input data (one sample)
    X = np.array([[0.35, 0.9]]) # Input layer with 2 neurons

    # Target output for the sample
    y = np.array([[0.5]])      # Output layer with 1 neuron

    # Define network parameters
    input_size = 2
    hidden_size = 2 # Hidden layer with 2 neurons
    output_size = 1
    learning_rate = 1
    epochs = 100

    # Create and train the neural network
    nn = NeuralNetwork(input_size, hidden_size, output_size, learning_rate)
    nn.train(X, y, epochs)

    # Test the trained network with the same sample
    print(f"\nInput: {X}")
    print(f"Predicted Output after training: {nn.forward(X)}")
    print(f"Target Output: {y}")

